---
AWSTemplateFormatVersion: 2010-09-09
Description: "This Cloudformation will enable config, cloudwatch events and Alarms. Create Alarms only in Master Account. it needs to execute in all account"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Masterdetail'
      Parameters:
      - MasterAccountNo
    - Label:
        default: 'Cloudwatch alerts'
      Parameters:
      - PrimaryEmailCloudwatchalarm
      - SecondaryEmailCloudwatchalarm
    ParameterLabels:
      MasterAccountNo:
        default: Master Account No
      PrimaryEmailCloudwatchalarm:
        default: Primary Email Address for Cloudwatch Alerts(Required)
      SecondaryEmailCloudwatchalarm:
        default: Secondary Email Address for Cloudwatch Alerts    
Parameters:
  MasterAccountNo:
    Description: 'Master AWS Account No'
    Type: Number
    MinValue: 000000000001
    MaxValue: 999999999999
    ConstraintDescription: "Enter Master Account No Only Ex:- 012345678901"
  PrimaryEmailCloudwatchalarm:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Required'Triggered alarms will alert to this email address. Verification required and you can opt-out later. Make sure to validate otherwise you won't be able to delete the subscription and have to wait 3 days for automatic deletion."
  SecondaryEmailCloudwatchalarm:
    Type: String
    Description: 'Optional Secondary Email id.'
    AllowedPattern: ".+@.+"
    Default: 'example2@example.com'
    Description: "'Optional'Triggered alarms will alert to this email address. Verification required and you can opt-out later. Make sure to validate otherwise you won't be able to delete the subscription and have to wait 3 days for automatic deletion."       
Conditions:
  mastoraccount: !Equals [!Ref MasterAccountNo, !Ref 'AWS::AccountId']
  SecondarySubcription: !Not [!Equals [!Ref SecondaryEmailCloudwatchalarm, 'example2@example.com']]
Resources:
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Notify Alerts (Cloudtrail/Guardduty/Securityhub/Cloudwatch) ${AWS::AccountId}"
      TopicName: CW-Notifications
      Subscription:
      - Endpoint:
          Ref: PrimaryEmailCloudwatchalarm
        Protocol: email
  SecondaryNotificationsub:
    Condition: SecondarySubcription
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref SecondaryEmailCloudwatchalarm
        Protocol: email
        TopicArn: !Ref 'AlarmNotificationTopic'
  RoleForCloudWatchEvents:
    Type: AWS::IAM::Role
    DependsOn: AlarmNotificationTopic
    Properties:
      RoleName: Lambda-CW-Events-SNS
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: CIS-AllowSnsPublish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: "*"
  FunctionToFormatCloudWatchEvent:
    Type: AWS::Lambda::Function
    DependsOn:
    - RoleForCloudWatchEvents
    - AlarmNotificationTopic
    Properties:
      FunctionName: FormatCloudWatchEvent
      Code:
        ZipFile: !Sub |
          #==================================================================================================
          # Function: process-cloudwatch-event
          # Purpose:  Processes CloudWatch Event before publishing to SNS.
          #==================================================================================================
          import boto3
          import json
          SNS_TOPIC_ARN = '${AlarmNotificationTopic}'
          #==================================================================================================
          # Function handler
          #==================================================================================================
          def lambda_handler(event, context):
            source = event['source']
            if source == 'aws.config':
              response = boto3.client('sns').publish(
                TopicArn = SNS_TOPIC_ARN,
                Message = json.dumps(event, indent=4),
                Subject = 'NOTIFICATION {0} : {1}'.format(event['detail-type'], event['detail']['configRuleName']),
                MessageStructure = 'raw'
              )
            else:
              response = boto3.client('sns').publish(
                TopicArn = SNS_TOPIC_ARN,
                Message = json.dumps(event, indent=4),
                Subject = 'NOTIFICATION {0}:{1}'.format(event['detail']['eventSource'], event['detail']['eventName']),
                MessageStructure = 'raw'
              )
      Description: Formats a given CloudWatch Event to be published to an SNS topic
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt RoleForCloudWatchEvents.Arn
      Runtime: python2.7
      Timeout: 5
  LambdaPermissionForCloudTrailCloudWatchEventRules:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionToFormatCloudWatchEvent
    Properties:
      FunctionName: !GetAtt FunctionToFormatCloudWatchEvent.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  ConsoleSignInFailuresMetricFilter:
    Condition: mastoraccount
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: 'CloudTrail/DefaultLogGroup'
      FilterPattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication") }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: ConsoleSignInFailureCount
        MetricValue: '1'
  ConsoleSignInFailuresAlarm:
    Condition: mastoraccount
    DependsOn:
    - ConsoleSignInFailuresMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailConsoleSignInFailures
      AlarmDescription: Alarms when an unauthenticated API call is made to sign into the console.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: ConsoleSignInFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '60'
      Statistic: Sum
      Threshold: '3'
      TreatMissingData: notBreaching
  AuthorizationFailuresMetricFilter:
    Condition: mastoraccount
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: 'CloudTrail/DefaultLogGroup'
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: AuthorizationFailureCount
        MetricValue: '1'
  AuthorizationFailuresAlarm:
    Condition: mastoraccount
    DependsOn:
    - AuthorizationFailuresMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailAuthorizationFailures
      AlarmDescription: Alarms when an unauthorized API call is made.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: AuthorizationFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '60'
      TreatMissingData: notBreaching
      Statistic: Sum
      Threshold: '1'
  ConsoleSignInWithoutMfaMetricFilter:
    Condition: mastoraccount
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: 'CloudTrail/DefaultLogGroup'
      FilterPattern: '{ $.eventName = "ConsoleLogin" && $.additionalEventData.MFAUsed = "No" }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: ConsoleSignInWithoutMfaEventCount
        MetricValue: '1'
  ConsoleSignInWithoutMFAAlarm:
    Condition: mastoraccount
    DependsOn:
    - ConsoleSignInWithoutMfaMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ConsoleSignInWithoutMFA
      AlarmDescription: Alarm for Management Console Sign-in without MFA.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: ConsoleSignInWithoutMfaEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '60'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching      
  RootuserIdentityusageMetricFilter:
    Condition: mastoraccount
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: 'CloudTrail/DefaultLogGroup'
      FilterPattern: '{ $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent" }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: RootAccountUsageEventCount
        MetricValue: '1'
  RootAccountUsageAlarm:
    Condition: mastoraccount
    DependsOn:
    - RootuserIdentityusageMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RootAccountUsage
      AlarmDescription: Alarm for Usage of "root" Account.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: RootAccountUsageEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '60'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching
  IamPolicyChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IAMPolicychange
      Description: Publishes formatted IAM policy change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - iam.amazonaws.com
          eventName:
            - AttachGroupPolicy
            - AttachRolePolicy
            - AttachUserPolicy
            - CreateAccessKey
            - CreatePolicy
            - CreatePolicyVersion
            - DeleteAccessKey
            - DeletePolicy
            - DeletePolicyVersion
            - DeleteRolePolicy
            - DeleteUserPolicy
            - DetachGroupPolicy
            - DetachRolePolicy
            - DetachUserPolicy
            - PutGroupPolicy
            - PutRolePolicy
            - PutUserPolicy
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1       
  CloudTrailCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CloudtrailChange
      Description: Publishes formatted CloudTrail change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - cloudtrail.amazonaws.com
          eventName:
          - StopLogging
          - DeleteTrail
          - UpdateTrail
          - CreateTrail
          - StartLogging
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  DetectS3BucketPolicyChanges:
    Type: AWS::Events::Rule
    Properties:
      Name: S3BucketPolicyChanges
      Description: Publishes formatted S3 bucket policy change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - s3.amazonaws.com
          eventName:
          - PutBucketAcl
          - PutBucketPolicy
          - PutBucketCors
          - PutBucketLifecycle
          - PutBucketReplication
          - DeleteBucketPolicy
          - DeleteBucketCors
          - DeleteBucketLifecycle
          - DeleteBucketReplication
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1        
  EC2InstanceStatechangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EC2statechange
      Description: Publishes formatted EC2 change events to an SNS topic
      EventPattern:
        Source: 
        - aws.ec2      
        detail-type:
        - EC2 Instance State-change Notification
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  CMKdeletecloudwatcheventrule:
    Type: AWS::Events::Rule
    Properties:
      Name: KMSDeleteordisable
      Description: Publishes formatted KMS change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - kms.amazonaws.com
          eventName:
          - DisableKey
          - ScheduleKeyDeletion
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1    
  DetectConfigChanges:
    Type: AWS::Events::Rule
    Properties:
      Name: ConfigServiceChanges
      Description: Publishes formatted Config change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - config.amazonaws.com
          eventName:
          - PutConfigurationRecorder
          - StopConfigurationRecorder
          - DeleteDeliveryChannel
          - PutDeliveryChannel
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  ConfigRulesComplianceChangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ConfigRulesComplianceChanges
      Description: Publishes formatted Config Rules Compliance Changes events to an SNS topic
      EventPattern:
        detail-type:
        - Config Rules Compliance Change
        source:
        - aws.config
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1        
  SecurityGroupChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SecurityGroupChanges
      Description: Publishes formatted security group change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AuthorizeSecurityGroupIngress
          - AuthorizeSecurityGroupEgress
          - RevokeSecurityGroupIngress
          - RevokeSecurityGroupEgress
          - CreateSecurityGroup
          - DeleteSecurityGroup
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  NetworkAclChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: NetworkAclChanges
      Description: Publishes formatted network ACL change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - CreateNetworkAcl
          - CreateNetworkAclEntry
          - DeleteNetworkAcl
          - DeleteNetworkAclEntry
          - ReplaceNetworkAclEntry
          - ReplaceNetworkAclAssociation
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  NetworkChangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: NetworkChangeEvents
      Description: Publishes formatted network change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AcceptVpcPeeringConnection
          - AttachClassicLinkVpc
          - AttachInternetGateway
          - AssociateRouteTable
          - CreateCustomerGateway
          - CreateInternetGateway
          - CreateRoute
          - CreateRouteTable
          - CreateVpc
          - CreateVpcPeeringConnection
          - DeleteCustomerGateway
          - DeleteInternetGateway
          - DeleteRoute
          - DeleteRouteTable
          - DeleteDhcpOptions
          - DeleteVpc
          - DeleteVpcPeeringConnection
          - DetachClassicLinkVpc
          - DetachInternetGateway
          - DisableVpcClassicLink
          - DisassociateRouteTable
          - EnableVpcClassicLink
          - ModifyVpcAttribute
          - RejectVpcPeeringConnection
          - ReplaceRoute
          - ReplaceRouteTableAssociation
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1     
  EventsRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: Notify-GuardDuty-Event
      Description: This rule will notify guardduty events and finding to SNS.
      EventPattern:
        source:
          - aws.guardduty
      State: ENABLED
      Targets:
        - Arn: !Ref AlarmNotificationTopic
          Id: sns
  SecurityHubFindingsToEmail:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: SecurityHubFindingsToEmail
      Description: 'CloudWatchEvents Rule to enable SecurityHub Findings in email '
      EventPattern:
        source:
          - aws.securityhub
        resources:
          - !Join 
            - ':'
            - - arn
              - aws
              - securityhub
              - !Ref 'AWS::Region'
              - !Ref 'AWS::AccountId'
              - !Join 
                - /
                - - action
                  - custom
                  - SendToEmail
      State: ENABLED
      Targets:
        - Id: SendFindingsTopic
          Arn: !Ref AlarmNotificationTopic
  ConfigServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSConfigServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - config.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      Policies:
      - PolicyName: CIS-configservice-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AWSConfigRole
            Effect: Allow
            Action:
            - config:Put*
            Resource: '*'
          - Sid: AWSCloudTrailConfig
            Effect: Allow
            Action:
            - cloudtrail:List*
            - cloudtrail:Desc*
            - cloudtrail:Look*
            - cloudtrail:Get*
            Resource: '*'
          - Sid: AWSConfigPutObject
            Effect: Allow
            Action: s3:PutObject
            Resource:
            - !Join ['', ['arn:aws:s3:::','config-bucket-',!Ref 'MasterAccountNo',/*]]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AWSConfigGetObject
            Effect: Allow
            Action: s3:GetBucketAcl
            Resource:
            - !Join ['', ['arn:aws:s3:::',config-bucket-, !Ref 'MasterAccountNo']]
  ConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Config-Service
      DisplayName: !Sub 'AWS Config Topic ${AWS::AccountId}'
  ConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ConfigTopic
      PolicyDocument:
        Statement:
          - Sid: AWSConfigSNSPolicy
            Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref ConfigTopic
            Principal:
              Service:
                - config.amazonaws.com
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    DependsOn: 
    - ConfigServiceRole
    Properties:
      Name: myconfigservice-recorder
      RoleARN: !GetAtt  ConfigServiceRole.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    DependsOn:
    - ConfigTopic
    Properties:
      Name: myconfigservice-deliverychannel
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      S3BucketName: !Join ['', ['config-bucket-',!Ref MasterAccountNo]]
      SnsTopicARN: !Ref ConfigTopic
  AWSConfigAggregatorRole:
    Type: AWS::IAM::Role
    Condition: mastoraccount 
    DependsOn:
    - ConfigRecorder
    Properties:
      RoleName: AWSConfigAggregatorRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSConfigRoleForOrganizations"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "config.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  GuardrailsComplianceAggregator:
    Type: AWS::Config::ConfigurationAggregator
    Condition: mastoraccount    
    DependsOn: 
    - AWSConfigAggregatorRole
    - ConfigDeliveryChannel
    Properties:
      OrganizationAggregationSource:
        RoleArn: !GetAtt AWSConfigAggregatorRole.Arn
        AllAwsRegions: true
      ConfigurationAggregatorName: Organization-GuardrailsComplianceAggregator      