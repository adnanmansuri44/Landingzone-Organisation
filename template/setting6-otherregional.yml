---
AWSTemplateFormatVersion: 2010-09-09
Description: "This Cloudformation will enable config, cloudwatch events in other region."
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'AccountDetail'
      Parameters:
      - MasterAccountNo
    - Label:
        default: 'Cloudwatch Alerts'
      Parameters:
      - Cloudwatchalertconfigure
      - PrimaryEmailCloudwatchalarm
      - SecondaryEmailCloudwatchalarm
    ParameterLabels:
      MasterAccountNo:
        default: Master Account No
      Cloudwatchalertconfigure:
        default: Want to Configure Cloudwatch Alerts ? 
      PrimaryEmailCloudwatchalarm:
        default: Primary Email Address for Cloudwatch Alerts(Required only if you want alert)
      SecondaryEmailCloudwatchalarm:
        default: Secondary Email Address for Cloudwatch Alerts      
Parameters:
  MasterAccountNo:
    Description: 'Master AWS Account No'
    Type: Number
    MinValue: 000000000001
    MaxValue: 999999999999
    ConstraintDescription: "Enter Master Account No Only Ex:- 012345678901"
  Cloudwatchalertconfigure:
    Type: String
    Default: 'No'
    Description: "Configures AWS Cloudwatch Events Rule regionally"
    AllowedValues:
    - 'Yes'
    - 'No'
  PrimaryEmailCloudwatchalarm:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Required'Triggered alarms will alert to this email address. Verification required and you can opt-out later. Make sure to validate otherwise you won't be able to delete the subscription and have to wait 3 days for automatic deletion."
  SecondaryEmailCloudwatchalarm:
    Type: String
    Description: 'Optional Secondary Email id.'
    AllowedPattern: ".+@.+"
    Default: 'example2@example.com'
    Description: "'Optional'Triggered alarms will alert to this email address. Verification required and you can opt-out later. Make sure to validate otherwise you won't be able to delete the subscription and have to wait 3 days for automatic deletion."
Conditions:
  SecondarySubcription: !Not [!Equals [!Ref SecondaryEmailCloudwatchalarm, 'example2@example.com']]
  Events: !Not [!Equals [!Ref Cloudwatchalertconfigure, 'No']]
  eventsecondarysub: !And 
    - !Condition SecondarySubcription
    - !Condition Events   
Resources:
  AlarmNotificationTopic:
    Condition: Events
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Notify Alerts (Cloudtrail/Guardduty/Securityhub/Cloudwatch) ${AWS::AccountId}"
      TopicName: CW-Notifications
      Subscription:
      - Endpoint:
          Ref: PrimaryEmailCloudwatchalarm
        Protocol: email
  SecondaryNotificationsub:
    Condition: eventsecondarysub
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref SecondaryEmailCloudwatchalarm
        Protocol: email
        TopicArn: !Ref 'AlarmNotificationTopic'
  FunctionToFormatCloudWatchEvent:
    Condition: Events
    Type: AWS::Lambda::Function
    DependsOn:
    - AlarmNotificationTopic
    Properties:
      FunctionName: FormatCloudWatchEvent
      Code:
        ZipFile: !Sub |
          #==================================================================================================
          # Function: process-cloudwatch-event
          # Purpose:  Processes CloudWatch Event before publishing to SNS.
          #==================================================================================================
          import boto3
          import json
          SNS_TOPIC_ARN = '${AlarmNotificationTopic}'
          #==================================================================================================
          # Function handler
          #==================================================================================================
          def lambda_handler(event, context):
            source = event['source']
            if source == 'aws.config':
              response = boto3.client('sns').publish(
                TopicArn = SNS_TOPIC_ARN,
                Message = json.dumps(event, indent=4),
                Subject = 'NOTIFICATION {0} : {1}'.format(event['detail-type'], event['detail']['configRuleName']),
                MessageStructure = 'raw'
              )
            else:
              response = boto3.client('sns').publish(
                TopicArn = SNS_TOPIC_ARN,
                Message = json.dumps(event, indent=4),
                Subject = 'NOTIFICATION {0}:{1}'.format(event['detail']['eventSource'], event['detail']['eventName']),
                MessageStructure = 'raw'
              )
      Description: Formats a given CloudWatch Event to be published to an SNS topic
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/Lambda-CW-Events-SNS"
      Runtime: python2.7
      Timeout: 5
  LambdaPermissionForCloudTrailCloudWatchEventRules:
    Condition: Events
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionToFormatCloudWatchEvent
    Properties:
      FunctionName: !GetAtt FunctionToFormatCloudWatchEvent.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com     
  CloudTrailCloudWatchEventRule:
    Condition: Events
    Type: AWS::Events::Rule
    Properties:
      Name: CloudtrailChange
      Description: Publishes formatted CloudTrail change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - cloudtrail.amazonaws.com
          eventName:
          - StopLogging
          - DeleteTrail
          - UpdateTrail
          - CreateTrail
          - StartLogging
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  DetectS3BucketPolicyChanges:
    Condition: Events
    Type: AWS::Events::Rule
    Properties:
      Name: S3BucketPolicyChanges
      Description: Publishes formatted S3 bucket policy change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - s3.amazonaws.com
          eventName:
          - PutBucketAcl
          - PutBucketPolicy
          - PutBucketCors
          - PutBucketLifecycle
          - PutBucketReplication
          - DeleteBucketPolicy
          - DeleteBucketCors
          - DeleteBucketLifecycle
          - DeleteBucketReplication
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1        
  EC2InstanceStatechangeCloudWatchEventRule:
    Condition: Events 
    Type: AWS::Events::Rule
    Properties:
      Name: EC2statechange
      Description: Publishes formatted EC2 change events to an SNS topic
      EventPattern:
        Source: 
        - aws.ec2      
        detail-type:
        - EC2 Instance State-change Notification
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  CMKdeletecloudwatcheventrule:
    Condition: Events
    Type: AWS::Events::Rule
    Properties:
      Name: KMSDeleteordisable
      Description: Publishes formatted KMS change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - kms.amazonaws.com
          eventName:
          - DisableKey
          - ScheduleKeyDeletion
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1    
  DetectConfigChanges:
    Condition: Events
    Type: AWS::Events::Rule
    Properties:
      Name: ConfigServiceChanges
      Description: Publishes formatted Config change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - config.amazonaws.com
          eventName:
          - PutConfigurationRecorder
          - StopConfigurationRecorder
          - DeleteDeliveryChannel
          - PutDeliveryChannel
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  ConfigRulesComplianceChangeCloudWatchEventRule:
    Condition: Events
    Type: AWS::Events::Rule
    Properties:
      Name: ConfigRulesComplianceChanges
      Description: Publishes formatted Config Rules Compliance Changes events to an SNS topic
      EventPattern:
        detail-type:
        - Config Rules Compliance Change
        source:
        - aws.config
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1        
  SecurityGroupChangesCloudWatchEventRule:
    Condition: Events
    Type: AWS::Events::Rule
    Properties:
      Name: SecurityGroupChanges
      Description: Publishes formatted security group change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AuthorizeSecurityGroupIngress
          - AuthorizeSecurityGroupEgress
          - RevokeSecurityGroupIngress
          - RevokeSecurityGroupEgress
          - CreateSecurityGroup
          - DeleteSecurityGroup
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  NetworkAclChangesCloudWatchEventRule:
    Condition: Events
    Type: AWS::Events::Rule
    Properties:
      Name: NetworkAclChanges
      Description: Publishes formatted network ACL change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - CreateNetworkAcl
          - CreateNetworkAclEntry
          - DeleteNetworkAcl
          - DeleteNetworkAclEntry
          - ReplaceNetworkAclEntry
          - ReplaceNetworkAclAssociation
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  NetworkChangeCloudWatchEventRule:
    Condition: Events
    Type: AWS::Events::Rule
    Properties:
      Name: NetworkChangeEvents
      Description: Publishes formatted network change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AcceptVpcPeeringConnection
          - AttachClassicLinkVpc
          - AttachInternetGateway
          - AssociateRouteTable
          - CreateCustomerGateway
          - CreateInternetGateway
          - CreateRoute
          - CreateRouteTable
          - CreateVpc
          - CreateVpcPeeringConnection
          - DeleteCustomerGateway
          - DeleteInternetGateway
          - DeleteRoute
          - DeleteRouteTable
          - DeleteDhcpOptions
          - DeleteVpc
          - DeleteVpcPeeringConnection
          - DetachClassicLinkVpc
          - DetachInternetGateway
          - DisableVpcClassicLink
          - DisassociateRouteTable
          - EnableVpcClassicLink
          - ModifyVpcAttribute
          - RejectVpcPeeringConnection
          - ReplaceRoute
          - ReplaceRouteTableAssociation
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1     
  ConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Config-Service
      DisplayName: !Sub 'AWS Config Topic ${AWS::AccountId}'
  ConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ConfigTopic
      PolicyDocument:
        Statement:
          - Sid: AWSConfigSNSPolicy
            Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref ConfigTopic
            Principal:
              Service:
                - config.amazonaws.com
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: myconfigservice-recorder
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/AWSConfigServiceRole"
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    DependsOn:
    - ConfigTopic
    Properties:
      Name: myconfigservice-deliverychannel
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      S3BucketName: !Join ['', ['config-bucket-',!Ref MasterAccountNo]]
      SnsTopicARN: !Ref ConfigTopic        